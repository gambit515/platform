import os

import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

from DB import get_products_by_category, get_categories, get_product_by_id, get_category_by_id


# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7828137116:AAEZTwnMFHQ5IAKIUIQfNfb3yKnFdzM55-U"

#TOKEN = "6542894948:AAHN59mcL79G0qS_lqVmgJeWsgAdWfe6wAo"#TEST

application = Application.builder().token(TOKEN).build()

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
IMAGE_DIR = "images/"

# –ú–∞–≥–∞–∑–∏–Ω –æ—Ç–∫—Ä—ã—Ç/–∑–∞–∫—Ä—ã—Ç
shop_status = {"is_open": True}

# –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
blocked_users = set()

# –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
order_timestamps = {}

admin_ids = [1170089312,5273933548]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

def is_admin(user_id):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    return user_id in admin_ids

async def send_order_to_admins(user, product,context: ContextTypes.DEFAULT_TYPE):
    for admin_id in admin_ids:
        try:
            await application.bot.send_message(
                admin_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['first_name']} ({user['id']}) —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: [–°—Å—ã–ª–∫–∞](https://t.me/{user['username']})"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")


async def order_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(update)
    await query.answer()

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    product_id = query.data.split("_")[1]
    product = get_product_by_id(product_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user ={
        "id" : query.from_user.id,
        "username" : query.from_user.username,
        "first_name": query.from_user.first_name
    }
    product_name = product['name']

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    await send_order_to_admins(user, product, context)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ
    await query.message.reply_text(
        f"–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Ç–æ–≤–∞—Ä '{product_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! "
        f"–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤–µ—Ü."
    )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in admin_ids:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞
    if len(context.args) < 1:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞.")
        return

    try:
        banned_user_id = int(context.args[0])
        blocked_users.add(banned_user_id)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {banned_user_id} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in admin_ids:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞.")
        return

    try:
        unbanned_user_id = int(context.args[0])
        blocked_users.discard(unbanned_user_id)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {unbanned_user_id} –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    categories = get_categories()

    # –°—Ç–∞—Ç—É—Å –º–∞–≥–∞–∑–∏–Ω–∞
    status = "üü¢ –ú–∞–≥–∞–∑–∏–Ω –æ—Ç–∫—Ä—ã—Ç" if shop_status["is_open"] else "üî¥ –ú–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä—ã—Ç"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = [
        [InlineKeyboardButton(category['name'], callback_data=f"category_{category['id']}")]
        for category in categories
    ]

    return InlineKeyboardMarkup(keyboard), (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω Chips&Beaches.\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤.\n\n{status}"
    )

# –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_category_menu(category_id):
    items = get_products_by_category(category_id)
    print(items)
    keyboard = [
        [InlineKeyboardButton(
            f"{item['name']} {'‚úÖ' if item['in_stock'] else '‚ùå'}",
            callback_data=f"product_{item['id']}"
        )]
        for item in items
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard, message = get_main_menu()
    await update.message.reply_text(message, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category_id = query.data.split("_")[1]
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ get_categor_by_id –≤–æy–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
    name = get_category_by_id(category_id)

    await query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {name['name']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=get_category_menu(category_id)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
async def product_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–æ–≤–∞—Ä–∞
    product_id = query.data.split("_")[1]
    product = get_product_by_id(product_id)
    image = product['image']
    #image_path = os.path.join(IMAGE_DIR, product['image'])

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    product_description = (
            f"{product['name']}\n"
            + product['description'].replace('\\n', '\n')
            + f"\n\n{'‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' if product['in_stock'] else '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    try:
        #with open(image_path, "rb") as photo:
            await query.edit_message_media(
                media=InputMediaPhoto(
                    #media=photo,
                    media=image,
                    caption=product_description,  # –£–∫–∞–∑—ã–≤–∞–µ–º caption –∑–¥–µ—Å—å
                ),
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{product_id}"),
                    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
                ]])
            )
    except FileNotFoundError:
        await query.message.reply_text("–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard, message = get_main_menu()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if query.message.photo:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        await query.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await query.message.reply_text(message, reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        await query.edit_message_text(text=message, reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
'''
async def toggle_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /toggle_stock <id> <on|off>")
        return

    product_id, status = args
    if product_id not in products:
        await update.message.reply_text("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    products[product_id]["in_stock"] = (status == "on")
    await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ '{products[product_id]['name']}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
'''

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
async def toggle_shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /toggle_shop <open|close>")
        return

    status = args[0]
    if status == "open":
        shop_status["is_open"] = True
        await update.message.reply_text("–ú–∞–≥–∞–∑–∏–Ω –æ—Ç–∫—Ä—ã—Ç üü¢.")
    elif status == "close":
        shop_status["is_open"] = False
        await update.message.reply_text("–ú–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä—ã—Ç üî¥.")
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'open' –∏–ª–∏ 'close'.")



async def user_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.full_name
    username = update.message.from_user.username

    if username:
        user_link = f"https://t.me/{username}"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(f"–í–∞—à–µ –∏–º—è: {user_name}\n–í–∞—à ID: {user_id}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å: {user_link}")
    else:
        await update.message.reply_text(f"–í–∞—à–µ –∏–º—è: {user_name}\n–í–∞—à ID: {user_id}\n–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ ID
async def send_message_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω
    user_id = update.message.from_user.id
    if user_id not in admin_ids:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_message <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        target_user_id = int(context.args[0])
        message = " ".join(context.args[1:])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await application.bot.send_message(chat_id=target_user_id, text=message)
        await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}.")
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except telegram.error.BadRequest as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(category_handler, pattern="^category_"))
    application.add_handler(CallbackQueryHandler(product_handler, pattern="^product_"))
    application.add_handler(CallbackQueryHandler(back_handler, pattern="^back$"))
    application.add_handler(CommandHandler("userinfo", user_info))
    application.add_handler(CommandHandler("toggle_shop", toggle_shop))
    application.add_handler(CommandHandler("send_message", send_message_to_user))

    application.add_handler(CallbackQueryHandler(order_handler, pattern="^order_"))

    # –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –±–∞–Ω–∞
    application.add_handler(CommandHandler("ban", ban_user))
    application.add_handler(CommandHandler("unban", unban_user))

    application.run_polling()

if __name__ == "__main__":
    main()
